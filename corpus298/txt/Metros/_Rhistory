library(tm)
install.packages("tm")
setwd("C:\Users\polly\Desktop\Kanz\Ranalysis")
setwd("C:\\Users\polly\\Desktop\\Kanz\\Ranalysis")
setwd("C:\\Users\polly\\Desktop\\Kanz\\Ranalysis")
setwd("C:\\Users\\polly\\Desktop\\Kanz\\Ranalysis")
getwd
getwd()
setwd("C:\\Users\\polly\\Desktop\\Kanz\\Ranalysis\\txt\\Metros")
#get listing of .txt files in directory
filenames <- list.files(getwd(),pattern="*.txt")
filenames
files <- lapply(filenames,readLines)
files
docs
docs <- Corpus(VectorSource(files))
docs
writeLines(as.character(docs[[8]]))
docs <-tm_map(docs,content_transformer(tolower))
writeLines(as.character(docs[[8]]))
toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, " ", x))})
docs <- tm_map(docs, toSpace, "-")
#remove punctuation
docs <- tm_map(docs, removePunctuation)
#Strip digits
docs <- tm_map(docs, removeNumbers)
#remove stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
#remove whitespace
docs <- tm_map(docs, stripWhitespace)
#Good practice to check every now and then
writeLines(as.character(docs[[8]]))
dtm <- DocumentTermMatrix(docs)
dtm
#convert rownames to filenames
rownames(dtm) <- filenames
#collapse matrix by summing over columns
freq <- colSums(as.matrix(dtm))
#length should be total number of terms
length(freq)
#create sort order (descending)
ord <- order(freq,decreasing=TRUE)
#List all terms in decreasing order of freq and write to disk
freq[ord]
write.csv(freq[ord],"word_freq.csv")
library(topicmodels)
install.packages("topicmodels")
library(topicmodels)
#Set parameters for Gibbs sampling
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
#Number of topics
k <- 5
ldaOut <-LDA (dtm,k, method="Gibbs", control=list(nstart=nstart, seed = seed, best=best, burnin = burnin, iter = iter, thin=thin)
ldaOut.topics <- as.matrix(topics(ldaOut))
ldaOut <-LDA(dtm,k, method="Gibbs", control=list(nstart=nstart, seed = seed, best=best, burnin = burnin, iter = iter, thin=thin))
ldaOut.topics <- as.matrix(topics(ldaOut))
write.csv(ldaOut.topics,file=paste("LDAGibbs,k,"DocsToTopics.csv))
write.csv(ldaOut.topics,file=paste("LDAGibbs,k,"DocsToTopics.csv""))
ldaOut.terms <- as.matrix(terms(ldaOut,6))
write.csv(ldaOut.terms,file=paste("LDAGibbs",k,"TopicsToTerms.csv"))
write.csv(ldaOut.topics,file=paste("LDAGibbs",k,"DocsToTopics.csv""))
ldaOut.terms <- as.matrix(terms(ldaOut,6))
write.csv(ldaOut.topics,file=paste("LDAGibbs",k,"DocsToTopics.csv"))
#top 6 terms in each topic
ldaOut.terms <- as.matrix(terms(ldaOut,6))
write.csv(ldaOut.terms,file=paste("LDAGibbs",k,"TopicsToTerms.csv"))
#top 6 terms in each topic
ldaOut.terms <- as.matrix(terms(ldaOut,6))
write.csv(ldaOut.terms,file=paste("LDAGibbs",k,"TopicsToTerms.csv"))
#probabilities associated with each topic assignment
topicProbabilities <- as.data.frame(ldaOut@gamma)
write.csv(topicProbabilities,file=paste("LDAGibbs",k,"TopicProbabilities.csv"))
#Find relative importance of top 2 topics
topic1ToTopic2 <- lapply(1:nrow(dtm),function(x)
sort(topicProbabilities[x,])[k]/sort(topicProbabilities[x,])[k-1])
#Find relative importance of second and third most important topics
topic2ToTopic3 <- lapply(1:nrow(dtm),function(x)
sort(topicProbabilities[x,])[k-1]/sort(topicProbabilities[x,])[k-2])
#write to file
write.csv(topic1ToTopic2,file=paste("LDAGibbs",k,"Topic1ToTopic2.csv"))
write.csv(topic2ToTopic3,file=paste("LDAGibbs",k,"Topic2ToTopic3.csv"))
